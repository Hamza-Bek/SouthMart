@page "/home"
@using Application.DTOs.Request
@using Application.DTOs.Request.ProductEntity
@using Application.DTOs.Response
@using Domain.Models.SellerEntity
@using Domain.Models.UserEntity
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IProductRepository productService
@inject ISellerRepository sellerService
@attribute [Authorize(Roles = "Seller")]
   @if (isLoading)
{
    <div class="loading-indicator">
        <p>Loading...</p>
    </div>
}
else
{    

<div class="page-wrapper">
    <div class="content">
        <div class="row">              
            <div class="col-lg-3 col-sm-6 col-12">
                <div class="dash-widget">
                    <div class="dash-widgetimg">
                        <span><img src="img/icons/dash1.svg" alt="img"></span>
                    </div>
                    <div class="dash-widgetcontent">
                            <h5>$<span class="counters" data-count="307144.00">@((Seller?.Revenue ?? 0).ToString("F2"))</span></h5>
                        <h6>Total Revenues Due</h6>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6 col-12">
                <div class="dash-widget dash1">
                    <div class="dash-widgetimg">
                        <span><img src="img/icons/dash2.svg" alt="img"></span>
                    </div>
                    <div class="dash-widgetcontent">
                            <h5>$<span class="counters" data-count="4385.00">@((Seller?.GrossSales ?? 0).ToString("F2"))</span></h5>
                        <h6>Total Sales Due</h6>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6 col-12">
                <div class="dash-widget dash2">
                    <div class="dash-widgetimg">
                        <span><img src="img/icons/dash3.svg" alt="img"></span>
                    </div>
                    <div class="dash-widgetcontent">
                            <h5>$<span class="counters" data-count="385656.50">@Last24hSalesAmount</span></h5>
                        <h6>Total Sale Amount (24h)</h6>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6 col-12">
                <div class="dash-widget dash3">
                    <div class="dash-widgetimg">
                        <span><img src="img/icons/dash4.svg" alt="img"></span>
                    </div>
                    <div class="dash-widgetcontent">
                        <h5>$<span class="counters" data-count="40000.00">400.00</span></h5>
                        <h6>Account debit</h6>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6 col-12 d-flex">
                <div class="dash-count">
                    <div class="dash-counts">
                            <h4>$@LastYearSalesAmount</h4>
                        <h5>Last year sales</h5>
                    </div>
                    <div class="dash-imgs">
                        <i data-feather="user"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6 col-12 d-flex">
                <div class="dash-count das1">
                    <div class="dash-counts">
                        <h4>$@CurrentYearSalesAmount</h4>
                        <h5>Current year sales</h5>
                    </div>
                    <div class="dash-imgs">
                        <i data-feather="user-check"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6 col-12 d-flex">
                <div class="dash-count das2">
                    <div class="dash-counts">
                            <h4>$@LastMonthSalesAmount</h4>
                        <h5>Last month sales</h5>
                    </div>
                    <div class="dash-imgs">
                        <i data-feather="file-text"></i>
                    </div>
                </div>
            </div>
            <div class="col-lg-3 col-sm-6 col-12 d-flex">
                <div class="dash-count das3">
                    <div class="dash-counts">
                        <h4>$@CurrentMonthSalesAmount</h4>
                        <h5>Current month sales</h5>
                    </div>
                    <div class="dash-imgs">
                        <i data-feather="file"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-7 col-sm-12 col-12 d-flex">
                <div class="card flex-fill">
                    <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                        <h5 class="card-title mb-0">Purchase & Sales</h5>
                        <div class="graph-sets">
                            <ul>
                                <li>
                                    <span>Sales</span>
                                </li>
                                <li>
                                    <span>Purchase</span>
                                </li>
                            </ul>
                            <div class="dropdown">
                                <button class="btn btn-white btn-sm dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                                    2022 <img src="img/icons/dropdown.svg" alt="img" class="ms-2">
                                </button>
                                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                    <li>
                                        <a href="javascript:void(0);" class="dropdown-item">2022</a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);" class="dropdown-item">2021</a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);" class="dropdown-item">2020</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="sales_charts"></div>
                    </div>
                </div>
            </div>
            <div class="col-lg-5 col-sm-12 col-12 d-flex">
                <div class="card flex-fill">
                    <div class="card-header pb-0 d-flex justify-content-between align-items-center">
                        <h4 class="card-title mb-0">Recently Added Products</h4>
                        <div class="dropdown">
                            <a href="javascript:void(0);" data-bs-toggle="dropdown" aria-expanded="false" class="dropset">
                                <i class="fa fa-ellipsis-v"></i>
                            </a>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                <li>
                                    <a href="/product/list" class="dropdown-item">Product List</a>
                                </li>
                                <li>
                                    <a href="/product/add" class="dropdown-item">Product Add</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive dataview">
                            <table class="table datatable ">
                                <thead>
                                    <tr>
                                        <th>Sno</th>
                                        <th>Products</th>
                                        <th>Price</th>
                                    </tr>
                                </thead>
                                <tbody>
                                        @if (RecentlyAddedProducts != null && RecentlyAddedProducts.Any())
                                        {
                                            @foreach (var product in RecentlyAddedProducts)
                                            {
                                                <tr>
                                                    <td>1</td>
                                                    <td class="productimgname">
                                                        <a href="productlist.html" class="product-img">
                                                            <img src="@product.CoverImageUrl" alt="product">
                                                        </a>
                                                        <a href="productlist.html">@product.Name</a>
                                                    </td>
                                                    <td>$@product.SellingPrice</td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="3">No products available.</td>
                                            </tr>
                                        }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card mb-0">
            <div class="card-body">
                <h4 class="card-title">Expired Products</h4>
                <div class="table-responsive dataview">
                    <table class="table datatable ">
                        <thead>
                            <tr>
                                <th>SNo</th>                                
                                <th>Product Name</th>
                                <th>Total Sold</th>
                                <th>Category Name</th>
                                <th>Added Date</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (ExpiredProducts != null)
                            {
                                @foreach (var product in ExpiredProducts)
                                {
                                    <tr>
                                        <td>@(index + 1)</td>
                                        <!--<td><a href="javascript:void(0);">IT0001</a></td>-->
                                        <td class="productimgname">
                                            <a class="product-img" href="productlist.html">
                                                <img src="@product?.CoverImageUrl" alt="product">
                                            </a>
                                            <a href="productlist.html">@product?.Name</a>
                                        </td>
                                        <td>@product?.TotalSold</td>
                                        <td>@product?.Category</td>
                                        <td>@product?.AddedDate</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <p>No products available.</p>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

  
}


  
@code{

    [CascadingParameter] 
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;
    private string userId;
    int index = 0;
    IEnumerable<ProductDTO> ExpiredProducts ;
    IEnumerable<ProductDTO> RecentlyAddedProducts;
    SellerAccountDTO Seller { get; set; }
    private bool isLoading;

    private SalesResponse LastYearSales;
    private SalesResponse CurrentYearSales;
    private SalesResponse LastMonthSales;
    private SalesResponse CurrentMonthSales;
    private SalesResponse Last24hSales;

    protected async override Task OnInitializedAsync()
    {
        await GetExpiredProducts();
        await GetRecentlyAddedProducts();
        await GetSellerAsync();
        await GetSalesForLastYearAsync(userId);
        await GetSalesForCurrentYearAsync(userId);
        await GetSalesForLastMonthAsync(userId);
        await GetSalesForCuurentMonthAsync(userId);
        await GetSalesForLast24hAsync(userId);
        isLoading = false;
    }

    private async Task GetExpiredProducts()
    {
        try
        {
            var authState = await AuthStateTask;
            var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

            if (userIdClaim != null)
                userId = userIdClaim.Value;

            ExpiredProducts = await sellerService.GetExpiredProductAsync(userId);
            if (ExpiredProducts != null && ExpiredProducts.Any())
            {
                Console.WriteLine("Products fetched successfully");
            }
            else
            {
                Console.WriteLine("No Products found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Products: {ex.Message}");
        }
        isLoading = false;
    }

    private async Task GetRecentlyAddedProducts()
    {
        try
        {
            var authState = await AuthStateTask;
            var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

            if (userIdClaim != null)
                userId = userIdClaim.Value;

            RecentlyAddedProducts = await sellerService.GetRecentlyAddedProductAsync(userId);
            if (RecentlyAddedProducts != null && RecentlyAddedProducts.Any())
            {
                Console.WriteLine("Products fetched successfully");
            }
            else
            {
                Console.WriteLine("No Products found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Products: {ex.Message}");
        }
        isLoading = false;
    }

    private async Task GetSellerAsync()
    {
        try
        {
            var authState = await AuthStateTask;
            var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

            if (userIdClaim != null)
                userId = userIdClaim.Value;

            Seller = await sellerService.GetSellerAccountAsync(userId);
            if (Seller != null)
            {
                Console.WriteLine("Seller fetched successfully");
            }
            else
            {
                Console.WriteLine("No Seller found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching Seller: {ex.Message}");
        }
    }

    private async Task GetSalesForLastYearAsync(string userId)
    {
        try
        {
            LastYearSales = await sellerService.GetSalesForLastYearAsync(userId);
            if (LastYearSales != null && LastYearSales.Flag)
            {
                Console.WriteLine("Sales for last year fetched successfully");
            }
            else
            {
                Console.WriteLine("No Sales data found.");
            }
        }
        catch (Exception ex)
        {
            LastYearSales = new SalesResponse(false, ex.Message, new List<OrderDetails>());
            Console.WriteLine($"Error fetching Sales for last year: {ex.Message}");
        }
    }

    private decimal LastYearSalesAmount =>
     LastYearSales?.SalesData?.Sum(order => order.Quantity * order.ProductPrice) ?? 0;

    private async Task GetSalesForCurrentYearAsync(string userId)
    {
        try
        {
            CurrentYearSales = await sellerService.GetSalesForCurrentYearAsync(userId);
            if (CurrentYearSales != null && CurrentYearSales.Flag)
            {
                Console.WriteLine("Sales for current year fetched successfully");
            }
            else
            {
                Console.WriteLine("No Sales data found.");
            }
        }
        catch (Exception ex)
        {
            CurrentYearSales = new SalesResponse(false, ex.Message, new List<OrderDetails>());
            Console.WriteLine($"Error fetching Sales for current year: {ex.Message}");
        }
    }

    private decimal CurrentYearSalesAmount =>
     CurrentYearSales?.SalesData?.Sum(order => order.Quantity * order.ProductPrice) ?? 0;

    private async Task GetSalesForLastMonthAsync(string userId)
    {
        try
        {
            LastMonthSales = await sellerService.GetSalesForLastMonthAsync(userId);
            if (LastMonthSales != null && LastMonthSales.Flag)
            {
                Console.WriteLine("Sales for last month fetched successfully");
            }
            else
            {
                Console.WriteLine("No Sales data found.");
            }
        }
        catch (Exception ex)
        {
            CurrentYearSales = new SalesResponse(false, ex.Message, new List<OrderDetails>());
            Console.WriteLine($"Error fetching Sales for last month: {ex.Message}");
        }
    }

    private decimal LastMonthSalesAmount =>
     LastMonthSales?.SalesData?.Sum(order => order.Quantity * order.ProductPrice) ?? 0;

    private async Task GetSalesForCuurentMonthAsync(string userId)
    {
        try
        {
            CurrentMonthSales = await sellerService.GetSalesForCurrentMonthAsync(userId);
            if (CurrentMonthSales != null && CurrentMonthSales.Flag)
            {
                Console.WriteLine("Sales for last month fetched successfully");
            }
            else
            {
                Console.WriteLine("No Sales data found.");
            }
        }
        catch (Exception ex)
        {
            CurrentMonthSales = new SalesResponse(false, ex.Message, new List<OrderDetails>());
            Console.WriteLine($"Error fetching Sales for last month: {ex.Message}");
        }
    }

    private decimal CurrentMonthSalesAmount =>
     CurrentMonthSales?.SalesData?.Sum(order => order.Quantity * order.ProductPrice) ?? 0;

    private async Task GetSalesForLast24hAsync(string userId)
    {
        try
        {
            Last24hSales = await sellerService.GetSalesForLast24HoursAsync(userId);
            if (Last24hSales != null && Last24hSales.Flag)
            {
                Console.WriteLine("Sales for last month fetched successfully");
            }
            else
            {
                Console.WriteLine("No Sales data found.");
            }
        }
        catch (Exception ex)
        {
            CurrentMonthSales = new SalesResponse(false, ex.Message, new List<OrderDetails>());
            Console.WriteLine($"Error fetching Sales for last month: {ex.Message}");
        }
    }

    private decimal Last24hSalesAmount =>
     Last24hSales?.SalesData?.Sum(order => order.Quantity * order.ProductPrice) ?? 0;
}