@page "/product/edit/{ProductId}"
@using Application.DTOs.Request.ProductEntity
@using AutoMapper
@using DashUI.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Http.Internal
@inject IProductRepository productService
@inject IMenuRepository menuService
@inject IFilesRepository fileService
@attribute [Authorize(Roles = "Seller")]

<div class="page-wrapper">
    <div class="content">
        <div class="page-header">
            <div class="page-title">
                <h4>Product Edit</h4>
                <h6>Update your product</h6>
            </div>
        </div>
        <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
            <div class="card">
                <div class="card-body">
                    <div class="row">
                        <!-- Product Name -->
                        <div class="col-lg-3 col-sm-6 col-12">
                            <div class="form-group">
                                <label>Product Name</label>
                                <InputText @bind-Value="product.Name" type="text" />
                            </div>
                        </div>
                        <!-- Category -->
                        <div class="col-lg-3 col-sm-6 col-12">
                            <div class="form-group">
                                <label>Category</label>
                                <select class="select" @bind="product.Category">
                                    @foreach (var kvp in Categories)
                                    {
                                        <option value="@kvp.Value">@kvp.Value</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <!-- Cost -->
                        <div class="col-lg-3 col-sm-6 col-12">
                            <div class="form-group">
                                <label>Cost</label>
                                <InputNumber @bind-Value="product.Cost" class="form-control" type="text" />
                            </div>
                        </div>
                        <!-- Selling Price -->
                        <div class="col-lg-3 col-sm-6 col-12">
                            <div class="form-group">
                                <label>Selling Price</label>
                                <InputNumber @bind-Value="product.SellingPrice" class="form-control" type="text" />
                            </div>
                        </div>
                        <!-- Quantity -->
                        <div class="col-lg-3 col-sm-6 col-12">
                            <div class="form-group">
                                <label>Quantity</label>
                                <InputNumber @bind-Value="product.Quantity" class="form-control" type="text" />
                            </div>
                        </div>
                        <!-- Description -->
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label>Description</label>
                                <InputTextArea @bind-Value="product.Description" class="form-control" />
                            </div>
                        </div>
                        <!-- Product Image -->
                     
                        <!-- Submit Button -->
                        <div class="col-lg-12 mt-3">
                            <input type="submit" class="btn btn-submit me-2" value="Update Product">
                            <a href="/home" class="btn btn-cancel">Cancel</a>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<style>
    /* Form Group Styles */
    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }

        .form-group input[type="text"],
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }

            .form-group input[type="text"]:focus,
            .form-group textarea:focus,
            .form-group select:focus {
                border-color: #80bdff;
                outline: 0;
                box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            }

    /* Select Styles */
    .select {
        appearance: none;
        background: #fff url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="feather feather-chevron-down" viewBox="0 0 24 24"><polyline points="6 9 12 15 18 9"/></svg>') no-repeat right 0.75rem center/8px 10px;
        padding-right: 2.25rem;
    }

        .select::-ms-expand {
            display: none;
        }
</style>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }
    private string userId;
    private string _errorMessage = string.Empty;
    public ProductDTO product = new ProductDTO();
    Dictionary<string, string> Categories = new();
   

    [Parameter]
    public string ProductId { get; set; } // This will help with editing the specific product

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var userClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

        if (userClaim != null)
            userId = userClaim.Value;

        await GetData();

        if (!string.IsNullOrEmpty(ProductId))
        {
            await LoadProduct(ProductId);
        }
    }

    private async Task LoadProduct(string productId)
    {
        try
        {
            var productsFromDb = await menuService.GetProductByIdAsync(productId);
            var productFromDb = productsFromDb.FirstOrDefault(); // Get the first product if available

            if (productFromDb != null)
            {
                product = productFromDb; // Assign fetched product data to the product DTO
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (!string.IsNullOrEmpty(product.Id))
        {            
            var result = await productService.UpdateProductAsync(product);
            if (result.Flag)
            {
                Console.WriteLine("Product updated successfully.");
            }
            else
            {
                Console.WriteLine($"Failed to update product: {result.Message}");
            }
        }
        else
        {
            _errorMessage = "Product ID is missing.";
        }
    }



 

    private async Task GetData()
    {
        try
        {
            Categories = await productService.GetCategoriesDicAsync();
            Console.WriteLine("Categories fetched successfully.");
        }
        catch (Exception ex)
        {
            _errorMessage = $"Error fetching categories: {ex.Message}";
        }
    }
}