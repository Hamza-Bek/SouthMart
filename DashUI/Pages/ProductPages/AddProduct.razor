@page "/product/add"
@using Application.DTOs.Request.ProductEntity
@using DashUI.Extensions
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject IProductRepository productService
@inject IFilesRepository fileService
@attribute [Authorize(Roles = "Seller")]

<div class="page-wrapper">
    <div class="content">
        <div class="page-header">
            <div class="page-title">
                <h4>Product Add</h4>
                <h6>Create new product</h6>
            </div>
        </div>
        <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
            <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Product Name</label>
                            <InputText @bind-Value="product.Name" type="text"/>
                        </div>
                    </div>
                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Category</label>
                          <select class="select" @bind="product.Category">
                                    @foreach (var kvp in Categories)
                                    {
                                        <option value="@kvp.Value">@kvp.Value</option>
                                    }
                                </select>
                        </div>
                    </div>
                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Cost</label>
                                <InputNumber @bind-Value="product.Cost" class="form-control" type="text" />
                        </div>
                    </div>
                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Selling Price</label>
                                <InputNumber @bind-Value="product.SellingPrice" class="form-control" type="text" />
                        </div>
                    </div>



                    <div class="col-lg-3 col-sm-6 col-12">
                        <div class="form-group">
                            <label>Quantity</label>
                                <InputNumber @bind-Value="product.Quantity" class="form-control" type="text" />
                        </div>
                    </div>
                    <div class="col-lg-12">
                        <div class="form-group">
                            <label>Description</label>
                            <InputTextArea @bind-Value="product.Description" class="form-control"/>
                        </div>
                    </div>
                       
                        <div class="col-lg-12">
                            <div class="form-group">
                                <label>Product Image</label>
                                <div class="image-upload">                        
                                    <InputFile OnChange="SelectPlateImage" multiple="false" type="file" name="chooseFile" id="chooseFile" />
                                    <div class="image-uploads">
                                        <img src="img/icons/upload.svg" alt="img">                                        
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 mt-3">
                            <input type="submit" class="btn btn-submit me-2" value="Add Product">
                            <a href="productlist.html" class="btn btn-cancel">Cancel</a>
                        </div>
                </div>
            </div>
        </div>
        </EditForm>
    </div>
</div>

<style>
    /* Form Group Styles */
    .form-group {
        margin-bottom: 1rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
        }

        .form-group input[type="text"],
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }

            .form-group input[type="text"]:focus,
            .form-group textarea:focus,
            .form-group select:focus {
                border-color: #80bdff;
                outline: 0;
                box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            }

    /* Select Styles */
    .select {
        appearance: none;
        background: #fff url('data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="feather feather-chevron-down" viewBox="0 0 24 24"><polyline points="6 9 12 15 18 9"/></svg>') no-repeat right 0.75rem center/8px 10px;
        padding-right: 2.25rem;
    }

        .select::-ms-expand {
            display: none;
        }

</style>

@code{
    [CascadingParameter]
    public Task <AuthenticationState> AuthStateTask{get; set;}
    private string userId;
    private const int MaxAllowedFileSize = 1024 * 1024 * 10;
    private string _errorMessage = string.Empty;
    public ProductDTO product = new ProductDTO();
    Dictionary<string, string> Categories = new();
    private List<IFormFile> _selectedImages = new();
    private readonly IEnumerable<string> _allowedFileExtensions = [".jpeg", ".png", ".jpg", ".webp"];

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        var userClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);

        if (userClaim != null)
            userId = userClaim.Value;

        await GetData();
        // Ensure plate.CategoryTag is properly initialized
        if (Categories.Any())
        {
            product.Category = Categories.Values.First();
        }
    }

    private async Task HandleValidSubmit()
    {
        product.Id = Guid.NewGuid().ToString();
        product.SellerId = userId;
        var result = await productService.AddProductAsync(product);
        if(result.Flag)
        {
            Console.WriteLine($"Product Added Successfully");
            if (_selectedImages.Any())
            {
                foreach (var img in _selectedImages)
                {
                    Console.WriteLine("Uploading an image...");
                    await fileService.UploadImageAsync(img, product.Id!);
                }
            }
            ResetForm();
        }
        else
        {
            Console.WriteLine($"Failed to add plate: {result.Message}");
        }
    }   

    private async Task SelectPlateImage(InputFileChangeEventArgs e)
    {
        Console.WriteLine("SelectPlateImage method triggered.");

        var file = e.File;
        Console.WriteLine($"File Name: {file.Name}, File Size: {file.Size}, File Type: {file.ContentType}");

        // check for file size and extension...
        var fileExtension = Path.GetExtension(e.File.Name);
        if (e.File.Size <= MaxAllowedFileSize && _allowedFileExtensions.Contains(fileExtension))
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(MaxAllowedFileSize).ReadAsync(buffer);
            var base64String = Convert.ToBase64String(buffer);
            var tempUrl = $"data:{file.ContentType};base64,{base64String}";

            var formFile = tempUrl.ToIFormFileFromBase64String();
            Console.WriteLine($"Converted IFormFile: {formFile.Name}, {formFile.Length} bytes");

            _selectedImages.Add(formFile);
        }
        else
        {
            Console.WriteLine("File failed size or extension check.");
        }
    }

    private async Task GetData()
    {
        try
        {
            Categories = await productService.GetCategoriesDicAsync();
            Console.WriteLine("Categories fetched successfully.");
            foreach (var category in Categories)
            {
                Console.WriteLine($"Key: {category.Key}, Value: {category.Value}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        product = new ProductDTO(); // Reset the product object
        _selectedImages.Clear();    // Clear the image selection list
        _errorMessage = string.Empty; // Clear any error messages
        if (Categories.Any())
        {
            product.Category = Categories.Values.First(); // Set the default category if needed
        }
        StateHasChanged(); // Trigger UI re-render
    }
}        