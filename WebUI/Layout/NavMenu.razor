@using Application.DTOs.Request.ProductEntity
﻿@using Domain.Models.UserEntity
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject IBuyerRepository buyerService
@inject IMenuRepository menuService


<div class="offcanvas offcanvas-end" data-bs-scroll="true" tabindex="-1" id="offcanvasSearch" aria-labelledby="Search">
    <div class="offcanvas-header justify-content-center">
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
        <div class="order-md-last">
            <h4 class="d-flex justify-content-between align-items-center mb-3">
                <span class="text-primary">Search</span>
            </h4>
            <form role="search" action="index.html" method="get" class="d-flex mt-3 gap-0">
                <input class="form-control rounded-start rounded-0 bg-light" type="email" placeholder="What are you looking for?" aria-label="What are you looking for?">
                <button class="btn btn-dark rounded-end rounded-0" type="submit">Search</button>
            </form>
        </div>
    </div>
</div>

<div class="container-fluid">
    <div class="row py-3 border-bottom">

        <div class="col-sm-4 col-lg-3 text-center text-sm-start">
            <div class="main-logo">
                <a href="/">
                    <img src="/imgs/main-logo(1).png" alt="logo" class="img-fluid">
                </a>
            </div>
        </div>

        <div class="col-sm-6 offset-sm-2 offset-md-0 col-lg-5 d-none d-lg-block">
            <div class="search-bar row bg-light p-2 my-2 rounded-4">
                <div class="col-md-4 d-none d-md-block">
                    <select class="form-select border-0 bg-transparent" @onchange="NavigateToMenu">
                        <option>All Categories</option>
                        @foreach(var category in categories)
                        {
                            <option value="@category.CategoryTag">@category.CategoryTag</option>
                        }
                       
                        
                    </select>
                </div>
                <div class="col-11 col-md-7">
                    <form id="search-form" class="text-center" action="index.html" method="post">
                        <input type="text" class="form-control border-0 bg-transparent" placeholder="Search for more than 20,000 products" />
                    </form>
                </div>
                <div class="col-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="currentColor" d="M21.71 20.29L18 16.61A9 9 0 1 0 16.61 18l3.68 3.68a1 1 0 0 0 1.42 0a1 1 0 0 0 0-1.39ZM11 18a7 7 0 1 1 7-7a7 7 0 0 1-7 7Z" /></svg>
                </div>
            </div>
        </div>



        <AuthorizeView>
            <Authorized>
                <div class="col-sm-8 col-lg-4 d-flex justify-content-end gap-5 align-items-center mt-4 mt-sm-0 justify-content-center justify-content-sm-end">
                    <ul class="d-flex justify-content-end list-unstyled m-0">
                        <li>
                            <a class="nav-link dropdown-toggle rounded-circle bg-light p-2 mx-1" role="button" id="pages" data-bs-toggle="dropdown" aria-expanded="false"><i class="fa-solid fa-user large-icon"></i></a>
                            <ul class="dropdown-menu" aria-labelledby="pages">
                                <li><a href="/profile" class="dropdown-item">Settings </a></li>
                                <li><a href="/order" class="dropdown-item">Track Order </a></li>
                                <li><a href="/orders/history" class="dropdown-item">Orders History </a></li>
                                <li><a href="cart.html" class="dropdown-item">Cart </a></li>                                
                                <li><a href="/logout" class="dropdown-item"><i class="fa-solid fa-right-from-bracket" style="color: #cc0000;"> Logout</i></a></li>
                            </ul>
                        </li>
                        <li>
                            <a href="#" class="rounded-circle bg-light p-2 mx-1">
                                <i class="fa-solid fa-heart large-icon"></i>
                            </a>
                        </li>
                        <li class="d-lg-none">
                            <a href="#" class="rounded-circle bg-light p-2 mx-1" data-bs-toggle="offcanvas" data-bs-target="#offcanvasCart" aria-controls="offcanvasCart">
                                <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="#cart"></use></svg>
                            </a>
                        </li>
                        <li class="d-lg-none">
                            <a href="#" class="rounded-circle bg-light p-2 mx-1" data-bs-toggle="offcanvas" data-bs-target="#offcanvasSearch" aria-controls="offcanvasSearch">
                                <svg width="24" height="24" viewBox="0 0 24 24"><use xlink:href="#search"></use></svg>
                            </a>
                        </li>
                    </ul>

                    <div class="cart text-end d-none d-lg-block dropdown">
                        <button class="border-0 bg-transparent d-flex flex-column gap-2 lh-1" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvasCart" aria-controls="offcanvasCart">
                            <span class="fs-6 text-muted dropdown-toggle">Your Cart</span>
                            <span class="cart-total fs-5 fw-bold">@cartItems.Sum(item => item.ProductPrice * item.Quantity)</span>
                        </button>
                    </div>
                </div>
                <div class="offcanvas offcanvas-end" data-bs-scroll="true" tabindex="-1" id="offcanvasCart" aria-labelledby="My Cart">
                    <div class="offcanvas-header justify-content-center">
                        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                    </div>
                    <div class="offcanvas-body">
                        <div class="order-md-last">
                            <h4 class="d-flex justify-content-between align-items-center mb-3">
                                <span class="text-primary">Your cart</span>
                                <span class="badge bg-primary rounded-pill">3</span>
                            </h4>
                            <ul class="list-group mb-3">
                                @foreach (var item in cartItems)
                                {
                                    <li class="list-group-item d-flex justify-content-between lh-sm">
                                        <div>
                                            <h6 class="my-0 d-inline-block ml-3">@item.ProductName</h6>
                                            <span class="mx-2">(@item.Quantity)</span>
                                        </div>


                                        <span class="quantity-control">
                                            <button class="quantity-btn" @onclick="() => RemoveProduct(item.ProductId, userId)">
                                                <i class="fa-solid fa-minus"></i>
                                            </button>
                                            <span class="quantity-text">@item.ProductPrice</span>
                                            <button class="quantity-btn" @onclick="() => AddProduct(item.ProductId, userId)">
                                                <i class="fa-solid fa-plus"></i>
                                            </button>
                                        </span>
                                        
                                        
                                    </li>
                                }

                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Total (USD)</span>
                                    <strong>@cartItems.Sum(item => item.ProductPrice * item.Quantity)</strong>
                                </li>

                            </ul>

                            <a class="w-100 btn btn-primary btn-lg" type="submit" href="/checkout">Continue to checkout</a>
                        </div>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>

                <div class="col-sm-8 col-lg-4 d-flex justify-content-end gap-5 align-items-center mt-4 mt-sm-0 justify-content-center justify-content-sm-end">
                    <div class="auth-container">
                        <ul class="d-flex justify-content-end list-unstyled m-0">
                            <li>
                                <a href="/signup" class="rounded-circle bg-light p-3 mx-2">
                                    Sign up
                                </a>
                            </li>
                            <li>
                                <a href="/login" class="rounded-circle bg-light p-3 mx-2">
                                    Login
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>

        <style>
            .btn-custom-sm {
                padding: 5px 10px;
                font-size: 12px;
            }

            /* Basic button styling for a clean, modern look */
            .btn {
                transition: background-color 0.3s ease, color 0.3s ease;
            }

            .btn-outline-primary {
                background-color: transparent;
                color: #007bff;
                border: 1px solid #007bff;
            }

                .btn-outline-primary:hover {
                    background-color: #007bff;
                    color: white;
                }

            .btn-primary {
                background-color: #007bff;
                color: white;
                border: 1px solid #007bff;
            }

                .btn-primary:hover {
                    background-color: #0056b3;
                    border-color: #0056b3;
                }

            /* Add some margin between the buttons */
            .mx-1 {
                margin-left: 0.25rem;
                margin-right: 0.25rem;
            }
        </style>

    </div>
</div>

@code {
    [CascadingParameter] 
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;
    private string userId;
    private string cartId;
    IEnumerable<CategoryDTO> categories;
    private IEnumerable<CartItem> cartItems = new List<CartItem>();
    private bool isLoading = true;    


    protected override async Task OnInitializedAsync()
    {

        await GetCategories();
        var authState = await AuthStateTask;
        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type} | Claim Value: {claim.Value}");
        }

        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
        var userCartIdClaim = authState.User.FindFirst(c => c.Type == "CartId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
            cartId = userCartIdClaim.Value;
            cartItems = await buyerService.GetCartItemsAsync(userId);
        }
        isLoading = false;        
    }

    private async Task RemoveProduct(string productId, string userId)
    {
        var selectedPlate = await buyerService.GetCartItemsAsync(userId);

        try
        {
            var response = await buyerService.RemoveProductFromCartAsync(productId, userId);
            if (response.Flag)
            {
                cartItems = cartItems.Where(p => p.Id != productId).ToList();

                cartItems = await buyerService.GetCartItemsAsync(userId);

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting plate: {ex.Message}");
        }
    }

    private async Task AddProduct(string productId, string userId)
    {
        var selectedPlate = await buyerService.GetCartItemsAsync(userId);

        try
        {
            var response = await buyerService.AddProductToCartAsync(productId, userId);
            if (response.Flag)
            {
                cartItems = cartItems.Where(p => p.Id != productId).ToList();

                cartItems = await buyerService.GetCartItemsAsync(userId);

            }

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting plate: {ex.Message}");
        }
    }
 
    private void NavigateToMenu(ChangeEventArgs e)
    {
        var selectedCategory = e.Value.ToString();
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            NavManager.NavigateTo($"/menu/{selectedCategory}");
        }
    } 

    private async Task GetCategories()
    {
        try
        {
            categories = await menuService.GetAllCategories();
            if (categories != null && categories.Any())
            {
                Console.WriteLine("Categories fetched successfully");
            }
            else
            {
                Console.WriteLine("No categories found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching categories: {ex.Message}");
        }
    }
}                