@page "/product-details/{product}"
@inject IMenuRepository menuService
@inject ICommentRepository commentService
@inject IBuyerRepository buyerService
@using Application.DTOs.Request.ProductEntity
@using Domain.Models.ProductEntity
@using System.Security.Claims
@using Domain.Models.UserEntity

<div class="container">
    <div class="title">PRODUCT DETAIL</div>
    <div class="detail">
        <div class="image">
            <img src="/imgs/thumb-tomatoes.png">
        </div>
        @foreach (var item in ProductDetail)
        {
            <div class="content">
                <h1 class="name">@item.Name</h1>
            <div class="price">$@item.SellingPrice</div>
            <div class="buttons">
                <button>-</button>
                    <button @onclick="() => AddPlateToCart(item.Id)">
                    Add To Cart
                    <span>
                        <svg class="" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 15a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0h8m-8 0-1-4m9 4a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-9-4h10l2-7H3m2 7L3 4m0 0-.792-3H1" />
                        </svg>
                    </span>
                </button>
                    <button>+</button>
            </div>
            <div class="description">
                    item.Description
            </div>
        </div>
        }
    </div>

    <div class="title">Reviews</div>
    <div class="listProduct">
        <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet">
        <div class="container bootdey">
            <div class="col-md-12 bootstrap snippets">
                <div class="panel">
                    <div class="panel-body">                        
                        <textarea class="form-control" rows="2" placeholder="What are you thinking?" @bind="newComment.content"></textarea>
                        <div class="mar-top clearfix">
                            <button class="btn-comment btn-comment-sm btn-comment-primary pull-right" @onclick="AddComment">
                                <i class="fa fa-pencil fa-fw"></i> Share
                            </button>
                        </div>
                    </div>
                </div>
                <div class="panel">
                    <div class="panel-body">
                        @foreach (var comment in Comments)
                        {
                            <div class="media-block">
                                <a class="media-left" href="#"><img class="img-circle img-sm" alt="Profile Picture" src="https://bootdey.com/img/Content/avatar/avatar1.png"> <a href="#" class="">@comment.User?.Name</a></a>
                                <div class="media-body">
                                    <div class="mar-btm">
                                        <p class="text-muted text-sm">@comment.DateCreated.ToString("MMM dd, yyyy")</p>
                                    </div>
                                    <p>@comment.content</p>
                                    <div class="pad-ver">
                                        <a class="btn-comment btn-comment-sm btn-comment-default btn-comment-hover-primary" href="#">Edit Comment</a>
                                    </div>
                                    <hr>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    body {
        margin-top: 20px;        
    }

    .img-sm {
        width: 46px;
        height: 46px;
    }

    .panel {
        box-shadow: 0 2px 0 rgba(0,0,0,0.075);
        border-radius: 0;
        border: 0;
        margin-bottom: 15px;
    }

        .panel .panel-footer, .panel > :last-child {
            border-bottom-left-radius: 0;
            border-bottom-right-radius: 0;
        }

        .panel .panel-heading, .panel > :first-child {
            border-top-left-radius: 0;
            border-top-right-radius: 0;
        }

    .panel-body {
        padding: 25px 20px;
    }


    .media-block .media-left {
        display: block;
        float: left
    }

    .media-block .media-right {
        float: right
    }

    .media-block .media-body {
        display: block;
        overflow: hidden;
        width: auto
    }

    .middle .media-left,
    .middle .media-right,
    .middle .media-body {
        vertical-align: middle
    }

    .thumbnail {
        border-radius: 0;
        border-color: #e9e9e9
    }

    .tag.tag-sm, .btn-comment-group-sm > .tag {
        padding: 5px 10px;
    }

    .tag:not(.label) {
        background-color: #fff;
        padding: 6px 12px;
        border-radius: 2px;
        border: 1px solid #cdd6e1;
        font-size: 12px;
        line-height: 1.42857;
        vertical-align: middle;
        -webkit-transition: all .15s;
        transition: all .15s;
    }

    .text-muted, a.text-muted:hover, a.text-muted:focus {
        color: #acacac;
    }

    .text-sm {
        font-size: 0.9em;
    }

    .text-5x, .text-4x, .text-5x, .text-2x, .text-lg, .text-sm, .text-xs {
        line-height: 1.25;
    }

    .btn-comment-trans {
        background-color: transparent;
        border-color: transparent;
        color: #929292;
    }

    .btn-comment-icon {
        padding-left: 9px;
        padding-right: 9px;
    }

        .btn-comment-sm, .btn-comment-group-sm > .btn-comment, .btn-comment-icon.btn-comment-sm {
            padding: 5px 10px !important;
        }

    .mar-top {
        margin-top: 15px;
    }
    body{
    margin: 0;
    font-family: Poppins;
}
a{
    color: unset;
    text-decoration: none;
}
.container{
    width: 900px;
    margin: auto;
    max-width: 90vw;
    text-align: center;
    padding-top: 10px;
}
.title{
    font-size: xx-large;
    padding: 20px 0;
}
.listProduct .item img{
    width: 90%;
    filter: drop-shadow(0 50px 20px #0009);
}
.listProduct{
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 20px;
}
.listProduct .item{
    background-color: #EEEEE6;
    padding: 20px;
    border-radius: 20px;
}
.listProduct .item h2{
    font-weight: 500;
    font-size: large;
}
.listProduct .item .price{
    letter-spacing: 7px;
    font-size: small;
}
/* detail page */

.detail{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 50px;
    text-align: left;
}
.detail .image img{
    width: 100%;
}
.detail .image{
    position: relative;
}
.detail .image::before{
    position: absolute;
    width: 300px;
    height: 300px;
    content: '';
    background-color: #94817733;
    z-index: -1;
    border-radius: 190px 100px 170px 180px;
    left: calc(50% - 150px);
    top: 50px;

}
.detail .name{
    font-size: xxx-large;
    padding: 40px 0 0 0;
    margin: 0 0 10px 0;
}
.detail .price{
    font-weight: bold;
    font-size: x-large;
    letter-spacing: 7px;
    margin-bottom: 20px;
}
.detail .buttons{
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
}
.detail .buttons button{
    background-color: #eee;
    border: none;
    padding: 15px 20px;
    border-radius: 20px;
    font-family: Poppins;
    font-size: large;
}
.detail .buttons svg{
    width: 15px;
}
.detail .buttons span{
    background-color: #555454;
    width: 30px;
    height: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    margin-left: 20px;
}
.detail .buttons button:nth-child(2){
    background-color: #2F2F2F;
    display: flex;
    justify-content: center;
    align-items: center;
    color: #eee;
    box-shadow: 0 10px 20px #2F2F2F77;
}
.detail .description{
    font-weight: 300;
}



/* mobile */

</style>

<script>
    let products = null;
    // get datas from file json
    fetch('products.json')
        .then(response => response.json())
        .then(data => {
            products = data;
            showDetail();
        })

    function showDetail() {
        // remove datas default from HTML
        let detail = document.querySelector('.detail');
        let listProduct = document.querySelector('.listProduct');
        let productId = new URLSearchParams(window.location.search).get('id');
        let thisProduct = products.filter(value => value.id == productId)[0];
        //if there is no product with id = productId => return to home page
        if (!thisProduct) {
            window.location.href = "/";
        }

        detail.querySelector('.image img').src = thisProduct.image;
        detail.querySelector('.name').innerText = thisProduct.name;
        detail.querySelector('.price').innerText = '$' + thisProduct.price;
        detail.querySelector('.description').innerText = '$' + thisProduct.description;


        (products.filter(value => value.id != productId)).forEach(product => {
            let newProduct = document.createElement('a');
            newProduct.href = '/detail.html?id=' + product.id;
            newProduct.classList.add('item');
            newProduct.innerHTML =
                `<img src="${product.image}" alt="">
                <h2>${product.name}</h2>
                <div class="price">$${product.price}</div>`;
            listProduct.appendChild(newProduct);
        });
    }

</script>

@code {
    [Parameter]
    public string product { get; set; }
    private IEnumerable<Comment> Comments;
    private IEnumerable<Product> ProductDetail;
    private CommentDTO newComment = new CommentDTO();

    [CascadingParameter] 
    public Task<AuthenticationState> AuthStateTask { get; set; } = null!;
    private string userId;   

    private async Task AddPlateToCart(string productId)
    {
        var authState = await AuthStateTask;



        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type} | Claim Value: {claim.Value}");
        }

        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
            var response = await buyerService.AddProductToCartAsync(productId, userId);
            if (response.Flag)
            {
                Console.WriteLine("Product Added!");
            }
            else
            {
                Console.WriteLine("Failed to add product");
            }
        }
        else
        {
            Console.WriteLine("Failed to add product");
        }
    }

    protected override async Task OnParametersSetAsync()
    {

        if (!string.IsNullOrEmpty(product))
        {
            await LoadProductDetail();
            await GetComments();
        }
    }

    private async Task LoadProductDetail()
    {
        ProductDetail = await menuService.GetProductByIdAsync(product);
    }

    private async Task GetComments()
    {
        if (!string.IsNullOrEmpty(product))
        {
            var comments = await commentService.GetProductCommentsAsync(product);
            Comments = comments.OrderByDescending(c => c.DateCreated);
        }
    }

    private async Task AddComment()
    {
        var authState = await AuthStateTask;
        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type} | Claim Value: {claim.Value}");
        }

        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

        if (string.IsNullOrEmpty(newComment.content))
        {
            Console.WriteLine("Comment content cannot be empty.");
            return;
        }

        newComment.Id = Guid.NewGuid().ToString();
        newComment.DateCreated = DateTime.Now;
        newComment.ProductId = product;
        newComment.UserId = userId;

        try
        {
            var result = await commentService.AddCommentAsync(newComment);

            if (result.Flag)
            {
                // Comment added successfully
                newComment = new CommentDTO(); // Clear the form
                await GetComments(); // Refresh comments list
            }
            else
            {
                // Display server error message
                Console.WriteLine($"Error: {result.Message}");
            }
        }
        catch (Exception ex)
        {
            // Handle exception
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }


}