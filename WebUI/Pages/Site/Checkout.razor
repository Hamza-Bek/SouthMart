@page "/checkout"
@using Application.DTOs.Request.OrderEntity
@using Domain.Models.UserEntity
@using System.Security.Claims
@inject IBuyerRepository buyerSerivce
@inject IOrderRepository orderService
@inject ILocationRepository locationService


<div class='container'>
    <div class='window'>
        <div class='order-info'>
            <div class='order-info-content'>
                <h2>Order Summary</h2>
                <div class='line'></div>
                <!-- Order Items -->
                <div class='order-items'>
                    <!-- Example order items, repeat as needed -->
                    @foreach(var item in cartItems)
                    {
                        <div class='order-item'>
                            <img src='https://dl.dropboxusercontent.com/s/sim84r2xfedj99n/%24_32.JPG' class='full-width' />
                            <div class='item-details'>
                                <span class='thin'>@item.ProductName</span>
                                <div class='price'>$@item.ProductPrice</div>
                            </div>
                        </div>
                        <div class='line'></div>
                    }                                                      
                </div>                
                <div class='total'>
                    <span style='float:left;'>
                        <div class='thin dense'>VAT</div>
                        <div class='thin dense'>Delivery</div>
                        TOTAL
                    </span>
                    <span style='float:right; text-align:right;'>
                        <div class='thin dense'>FREE</div>
                        <div class='thin dense'>FREE</div>
                        $@cartItems.Sum(item => item.ProductPrice * item.Quantity)
                    </span>
                </div>
            </div>
        </div>
        <div class="credit-info">
            <div class="credit-info-content">
                <table class="half-input-table">
                    <tr>
                        <td>Please select your Payment: </td>
                        <td>
                            <select id="card-select" class="card-select">
                                <option value="visa" selected>Visa</option>
                                <option value="master">On-Door payment</option>
                            </select>
                        </td>
                    </tr>
                </table>
                <div id="card-details">
                    <img src="https://dl.dropboxusercontent.com/s/ubamyu6mzov5c80/visa_logo%20%281%29.png" height="80" class="credit-card-image" id="credit-card-image" />
                    <label>Card Number</label>
                    <input class="input-field" />
                    <label>Card Holder</label>
                    <input class="input-field" />
                    <table class="half-input-table">
                        <tr>
                            <td>
                                <label>Expires</label>
                                <input class="input-field" />
                            </td>
                            <td>
                                <label>CVC</label>
                                <input class="input-field" />
                            </td>
                        </tr>
                    </table>
                </div>
                <div><a class="pointer-event" href="/profile"><i class="fa-solid fa-location-dot"></i> Add Location?</a></div>
                <a @onclick="PlaceOrder" class="pay-btn">Checkout</a>
            </div>
        </div>
    </div>
</div>

<link rel="stylesheet" type="text/css" href="css/Checkout.css">

<script>
    document.getElementById('card-select').addEventListener('change', function () {
        var cardDetails = document.getElementById('card-details');
        if (this.value === 'master') { // Assuming 'master' is for On-Door payment
            cardDetails.style.display = 'none';
        } else {
            cardDetails.style.display = 'block';
        }
    });
</script>

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; } = null!;
    private string userId;
    private string cartId;
    private IEnumerable<CartItem> cartItems = new List<CartItem>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateTask;
        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type} | Claim Value: {claim.Value}");
        }

        var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
        var userCartIdClaim = authState.User.FindFirst(c => c.Type == "CartId");
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
            cartId = userCartIdClaim.Value;
            cartItems = await buyerSerivce.GetCartItemsAsync(userId);

        }
        isLoading = false;
    }                                                                                                                                                                                                              


    private async Task PlaceOrder()
    {
        isLoading = true;

        try
        {
            var location = await locationService.GetLocation(userId);
            if (location == null || !location.Any())
            {
                NavManager.NavigateTo("/profile", true);
                return;
            }

            if (cartItems == null || !cartItems.Any())
            {
                await js.InvokeVoidAsync("alert", "No items in the cart!");
                isLoading = false;
                return;
            }

            // Create the OrderDTO with necessary information
            var orderDto = new OrderDTO
                {
                    OrderDate = DateTime.UtcNow,
                    OrderTotal = cartItems.Sum(item => item.Quantity * item.ProductPrice),
                    UserId = userId,
                    LocationId = location.First().LocationId // Assuming the first location is the one to use
                };

            var response = await orderService.PlaceOrderAsync(orderDto);
            if (response.Flag)
            {
                await orderService.ClearCartTotalAsync(userId);
                await orderService.ClearCartItemsAsync(userId);
                NavManager.NavigateTo("/order");
                Console.WriteLine("Order placed successfully.");
            }
            else
            {
                Console.WriteLine($"Error: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error placing order: {ex.Message}");
        }

        isLoading = false;
    }

}  