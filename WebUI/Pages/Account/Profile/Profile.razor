@page "/profile"
@using Application.DTOs.Request
@using Application.DTOs.Request.Account
@using Application.DTOs.Request.OrderEntity
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject ILocationRepository locationService
@inject IAccountRepository accountService
@inject ISellerRepository sellerService
@attribute [Authorize]

<div class="demo-page">
    <div class="demo-page-navigation">
        <nav>
            <ul>
                <li>
                    <a href="#installation">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-tool">
                            <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z" />
                        </svg>
                        Orders
                    </a>
                </li>
                <li>
                    <a href="#structure">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-layers">
                            <polygon points="12 2 2 7 12 12 22 7 12 2" />
                            <polyline points="2 17 12 22 22 17" />
                            <polyline points="2 12 12 17 22 12" />
                        </svg>
                        Favorites
                    </a>
                </li>
                <li>
                    <a href="seller">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-align-justify">
                            <line x1="21" y1="10" x2="3" y2="10" />
                            <line x1="21" y1="6" x2="3" y2="6" />
                            <line x1="21" y1="14" x2="3" y2="14" />
                            <line x1="21" y1="18" x2="3" y2="18" />
                        </svg>
                        Seller account
                    </a>
                </li>
                <li>
                    <a href="#checkbox-and-radio">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-check-square">
                            <polyline points="9 11 12 14 22 4" />
                            <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11" />
                        </svg>
                        Logout
                    </a>
                </li>
              
            </ul>
        </nav>
    </div>
    <main class="demo-page-content">
        <section>
            <div class="href-target" id="intro"></div>
            <h1 class="package-name">What is SouthMart?</h1>
            <p>
                It’s a virtual multi-tenant website, Where you can find what you are looking for Easily, Rapidly with best prices 😉. Hypermarket 🛒 that sells everything .
            </p>         
        </section>

        <section>
            <div class="href-target" id="user-details"></div>
            <h1>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-user">
                    <path d="M20 21v-2a4 4 0 0 0-3-3.87"></path>
                    <path d="M4 21v-2a4 4 0 0 1 3-3.87"></path>
                    <path d="M12 7a4 4 0 1 0 0-8 4 4 0 0 0 0 8z"></path>
                </svg>
                User Details
            </h1>
            <div class="user-profile">
                <div class="user-image-container">
                    <img src="imgs/avatar.svg" alt="User Image" class="user-image" />
                    <button class="edit-image-button" title="Edit Photo">
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                </div>
                <div class="user-info">
                    @foreach (var info in user)
                    {
                        <div class="nice-form-group">
                            <label>username</label>
                            <input type="text" placeholder="@info.Username" read />
                        </div>

                        <div class="nice-form-group">
                            <label>Email</label>
                            <small>With additional information below the label</small>
                            <input type="text" placeholder="@info.UserEmail" readonly />
                        </div>
                    }
                </div>
            </div>

            <details>
                <summary>
                    <div class="toggle-code">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-code">
                            <polyline points="16 18 22 12 16 6" />
                            <polyline points="8 6 2 12 8 18" />
                        </svg>
                        Save Changes
                    </div>
                </summary>
                <script src="https://gist.github.com/nielsVoogt/a00c2c8b6b7acfacce6d50926379e722.js"></script>
            </details>
        </section>

        <section>
            <div class="href-target" id="input-types"></div>
            <h1>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-align-justify">
                    <line x1="21" y1="10" x2="3" y2="10" />
                    <line x1="21" y1="6" x2="3" y2="6" />
                    <line x1="21" y1="14" x2="3" y2="14" />
                    <line x1="21" y1="18" x2="3" y2="18" />
                </svg>
                Location
            </h1>
            <p>All available input types are included</p>

            <EditForm Model="location" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="nice-form-group">
                    <label>Phone</label>
                    <InputText type="tel" @bind-Value="location.PhoneNumber" placeholder="Phone number" />
                </div>

                <div class="nice-form-group">
                    <label>Country</label>
                    <InputText type="text" @bind-Value="location.Country" placeholder="Country" />
                </div>

                <div class="nice-form-group">
                    <label>Street</label>
                    <InputText type="text" @bind-Value="location.Street" placeholder="Street number" />
                </div>

                <div class="nice-form-group">
                    <label>Building</label>
                    <InputText type="text" @bind-Value="location.Building" placeholder="Building number" />
                </div>

                <div class="nice-form-group">
                    <label>Floor</label>
                    <InputText type="text" @bind-Value="location.Floor" placeholder="Floor number" />
                </div>

                <button type="submit" class="btn btn-primary">
                    @(hasLocation ? "Update Location" : "Add Location")
                </button>
            </EditForm>
        </section>    

        <section id="seller" >
            <div class="href-target" id="icons"></div>
            <h1>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-feather">
                    <path d="M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z" />
                    <line x1="16" y1="8" x2="2" y2="22" />
                    <line x1="17.5" y1="15" x2="9" y2="15" />
                </svg>
               Request Seller Account
            </h1>
            <p>
               Join us NOW! and start your business with selling prooducts with us.
            </p>

            @if (sellerAccountStatus == "Pending")
            {
                <p>You seller account request is now under review. please wait.</p>
            }
            else if (sellerAccountStatus == "Approved")
            {
                <a href=""> Navigate to dashboard? </a>
            }
            else
            {
            <EditForm Model="@sellerAccount" OnValidSubmit="@HandleValidLocationSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="nice-form-group">
                    <label>Name</label>
                    <InputText @bind-Value="sellerAccount.Name" placeholder="Your business name" class="icon-left" />
                </div>

                <div class="nice-form-group">
                    <label>Description</label>
                    <InputText @bind-Value="sellerAccount.Description" placeholder="Business description" class="icon-left" />
                </div>

                <div class="nice-form-group">
                    <label>Upload Business Logo</label>
                    <InputFile OnChange="HandleFileSelected" class="icon-left" />
                </div>

                <button type="submit" class="btn btn-primary">Apply for Seller Account</button>
            </EditForm>
            }

            <details>
                <summary>
                    <div class="toggle-code">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-code">
                            <polyline points="16 18 22 12 16 6" />
                            <polyline points="8 6 2 12 8 18" />
                        </svg>
                        Send Request
                    </div>
                </summary>
                <script src="https://gist.github.com/nielsVoogt/8cc4cd8ebc6e81c3f889f1b40037b0cc.js"></script>
            </details>
        </section>        

        <footer>Made with ♥ for CSS</footer>
    </main>
</div>

<link rel="stylesheet" type="text/css" href="css/ProfileForm.css">

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; } = null!;
    private string userId;    
    private IEnumerable<GetUserDTO> user;
    public LocationDTO location = new LocationDTO();
    private bool isLoading = true;
    private bool hasLocation = false;
    private SellerAccountDTO sellerAccount = new SellerAccountDTO();
    private string sellerAccountStatus;
    private string errorMessage;


    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"Location Details: Phone = {location.PhoneNumber}, Country = {location.Country}, Street = {location.Street}, Building = {location.Building}, Floor = {location.Floor}");
        Console.WriteLine($"Has Location: {hasLocation}");

        if (hasLocation)
        {
            location.ApplicationUserId = userId;  // Ensure ApplicationUserId is set

            var result = await locationService.UpdateLocationAsync(location);
            Console.WriteLine($"Update Result: Success = {result.Flag}, Message = {result.Message}");

            if (result.Flag)
            {
                await js.InvokeVoidAsync("alert", "Location updated successfully");
                NavManager.NavigateTo("/client/cart/home");
            }
            else
            {
                Console.WriteLine($"Failed to update location: {result.Message}");
            }
        }
        else
        {
            location.LocationId = Guid.NewGuid().ToString();
            location.ApplicationUserId = userId;  // Ensure ApplicationUserId is set

            var result = await locationService.AddLocationAsync(location);
            Console.WriteLine($"Add Result: Success = {result.Flag}, Message = {result.Message}");

            if (result.Flag)
            {
                await js.InvokeVoidAsync("alert", "New location added successfully");
                NavManager.NavigateTo("/checkout");
            }
            else
            {
                Console.WriteLine($"Failed to add location: {result.Message}");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateTask;

            foreach (var claim in authState.User.Claims)
            {
                Console.WriteLine($"Claim Type: {claim.Type} | Claim Value: {claim.Value}");
            }

            var userIdClaim = authState.User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            var userCartIdClaim = authState.User.FindFirst(c => c.Type == "CartId");
            if (userIdClaim != null)
            {
                userId = userIdClaim.Value;
            }

            user = await accountService.GetUserAsync(userId);
            var userLocations = await locationService.GetLocation(userId);
            if (userLocations != null && userLocations.Any())
            {
                location = userLocations.First();
                hasLocation = true;
            }

            var sellerAccount = await sellerService.GetSellerAccountAsync(userId);
            if (sellerAccount != null)
            {
                sellerAccountStatus = sellerAccount.Status;
            }


            isLoading = false;
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., show error message)
            Console.WriteLine($"Error fetching orders: {ex.Message}");
        }
    }

    private async Task HandleValidLocationSubmit()
    {
        sellerAccount.SellerId = userId;
        sellerAccount.Id = Guid.NewGuid().ToString();
        var response = await sellerService.CreateSellerAccountAsync(sellerAccount);
        if (response.Flag)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            errorMessage = response.Message;
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream();
            var buffer = new byte[file.Size];
            await stream.ReadAsync(buffer, 0, (int)file.Size);
        }
    }

}
