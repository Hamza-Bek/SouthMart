@page "/invoice/{orderId}"
@using Application.DTOs.Request.OrderEntity
@using Domain.Models.UserEntity
@inject IOrderRepository orderService

		<div class="invoice-box">
			<table cellpadding="0" cellspacing="0">
				<tr class="top">
					<td colspan="2">
						<table>
							<tr>
								<td class="title">
									<img
										src="imgs/main-logo(1).png"
										style="width: 100%; max-width: 300px"
									/>
								</td>

								<td>
									Invoice #: @order?.OrderNumber<br />
									Created : @order?.OrderDate<br />
									
								</td>
							</tr>
						</table>
					</td>
				</tr>

				<tr class="information">
					<td colspan="2">
						<table>
							<tr>
								<td>
									@order?.Location?.PhoneNumber<br />
									@order?.Location?.Country, @order?.Location?.Street<br />
									Building : @order?.Location?.Building , Floor : @order?.Location?.Floor
								</td>

								<td>
									@order?.OrderMaker.Email
								</td>
							</tr>
						</table>
					</td>
				</tr>

				<tr class="heading">
					<td>Payment Method</td>

					<td>Check #</td>
				</tr>

				<tr class="details">
					<td>Check</td>

					<td>1000</td>
				</tr>

				<tr class="heading">
					<td>Item</td>

					<td>Price</td>
				</tr>
				@foreach(var item in order?.OrderDetails )
				{
					<tr class="item">
						<td>@item.ProductName  qty : @item.Quantity</td>
						
						<td>$@item.ProductPrice</td>
					</tr>
				}

				<tr class="total">
					<td></td>
					<td>Total: $@order?.OrderDetails.Sum(i => i.ProductPrice * i.Quantity)</td>
				</tr>

			</table>
		</div>

<link rel="stylesheet" type="text/css" href="/css/invoice.css" />

@code {
	[CascadingParameter]
	public Task<AuthenticationState> AuthStateTask { get; set; } = null!;

	[Parameter]
	public string orderId { get; set; } = string.Empty;

	public Order? order { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		if (!string.IsNullOrEmpty(orderId))
		{
			var orders = await orderService.GetUserOrdersByOrderIdAsync(orderId);
			order = orders.FirstOrDefault();
		}
	}
}
